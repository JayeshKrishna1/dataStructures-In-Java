//only leetcode
//uses binary search

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowLength = matrix.length;
        int colLength = matrix[0].length;
        int lo = 0;
        int hi = (rowLength*colLength)-1;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(matrix[mid/colLength][mid%colLength] == target){
                return true;
            }
            if(matrix[mid/colLength][mid%colLength] < target){
                lo = mid+1;
            }
            else{
                hi = mid-1;
            }
        }
        return false;
    }
}

O(log N*M)->time
O(1)->space

//for both leetcode and gfg

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowLength = matrix.length;
        int colLength = matrix[0].length;
        int i = 0,j=colLength-1;
        while(i< rowLength && j < colLength && i>=0 && j>=0){
            if(matrix[i][j] == target){
                return true;
            }
            if(matrix[i][j] < target){
                i++;
            }
            else{
                j--;
            }
        }
        return false;
    }
}

O(log N)
O(1)