merge sort approach

import java.util.*;

public class Ma {
    public static void main(String[] args) {
        int[] arr = { 2 ,5 ,1 ,3 ,4};
        int count=0;
        count = mergeSort(arr,count);
        System.out.println(Arrays.toString(arr));
        System.out.println(count);
    }

    public static int mergeSort(int[] arr,int count) {
        if (arr.length < 2) {
            return count;
        }
        // int l = 0;
        // int r = arr.length;
        int middle = arr.length / 2;
        int[] left = new int[middle];
        for (int i = 0; i < middle; i++) {
            left[i] = arr[i];
        }
        int[] right = new int[arr.length - middle];
        for (int i = middle; i < arr.length; i++) {
            right[i - middle] = arr[i];
        }
        count +=mergeSort(left,count);
        count+=mergeSort(right,count);

        count = merge(left, right, arr,count);
        return count;
    }

    public static int merge(int[] left, int[] right, int[] result,int count) {
        int i = 0, j = 0, k = 0;
        // int[] result = new int[left.length+right.length];
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                result[k++] = left[i++];
            } else {
                result[k++] = right[j++];
                count += left.length-i;
            }
        }
        while (i < left.length) {
            result[k++] = left[i++];
        }
        while (j < right.length) {
            result[k++] = right[j++];
        }

        return count;
    }
}

O(NlogN)->time
O(NLogN)->space