class Solution {
    public void rotate(int[][] matrix) {
        for(int i=0;i<matrix.length;i++){
            for(int j=i;j<matrix[0].length;j++){
                 int temp = matrix[i][j];
                 matrix[i][j] = matrix[j][i];
                 matrix[j][i] = temp;
            }
        }
        for(int i =0;i<matrix.length;i++){
            // int temp = matrix[0].length-1;
            Stack<Integer> st = new Stack<>();
            for(int j=0;j<matrix[0].length;j++){
                // if(matrix[i][j]!=matrix[i][temp]){
                //     int temp1 = matrix[i][j];
                //     matrix[i][j] = matrix[i][temp];
                //     matrix[i][temp] = temp;
                //     temp--;
                // }
                st.push(matrix[i][j]);
            }
            int k=0;
            while(!st.empty()){
                matrix[i][k] = st.pop();
                k++;
            }
        }
    }
}
O(n^2)

to pointer approach to reverse a array
int[] arr = {1,2,3,4,5};
      int i = 0,j = arr.length-1;
      while(i!=j || i<j){
          int temp=0;
           temp = arr[i];
           arr[i] = arr[j];
           arr[j] = temp;
           i++;
           j--;
      }