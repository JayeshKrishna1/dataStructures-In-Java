package practice;
import java.util.*;
public class AvlTree {
    private class AVLNode{
        private int value;
        private int height;
        private int balanceFactor;
        private AVLNode leftChild;
        private AVLNode rightChild;
        private AVLNode(int value){
            this.value = value;
        }
    }
    private AVLNode root;
    public void insert(int value){
         root = insert(root,value);
    }
    private AVLNode insert(AVLNode root,int value){
        if(root == null){
            root = new AVLNode(value);
            return root;
        }
        if(value < root.value){
            root.leftChild = insert(root.leftChild,value);
        }
        else{
            root.rightChild = insert(root.rightChild,value);
        }
        root.height = Math.max(height(root.leftChild),height(root.rightChild))+1;
        root.balanceFactor = height(root.leftChild)-height(root.rightChild);
        // System.out.println("balance factor of "+root.value+" is"+root.balanceFactor);
        if(root.balanceFactor >1){
            System.out.println(root.value+" is left heavy");
            if(root.leftChild.balanceFactor >= 1){
                System.out.println(root.value+" needs right rotation");
                root = rightrotate(root);
            }
            else if( root.leftChild.balanceFactor <= -1){
                System.out.println(root.leftChild.value+" needs left rotation "+root.value+" needs right rotation");
                root.leftChild = leftrotate(root.leftChild);
                root = rightrotate(root);
            }
        }
        else if(root.balanceFactor < -1){
            System.out.println(root.value+" is right heavy");
            if(root.rightChild.balanceFactor <= -1){
                System.out.println(root.value+" needs left rotation");
                root = leftrotate(root);
            }
            else if(root.rightChild.balanceFactor >=1){
                System.out.println(root.rightChild.value+" needs right rotation "+root.value+" needs left rotation");
                root.rightChild = rightrotate(root.rightChild);
                root = leftrotate(root);
            }
        }
        return root;
    }
    private AVLNode leftrotate(AVLNode root){
        AVLNode newRoot = root.rightChild;
        root.rightChild = newRoot.leftChild;
        newRoot.leftChild = root;
        root.height = Math.max(height(root.leftChild), height(root.rightChild)) + 1;
        newRoot.height = Math.max(height(newRoot.leftChild), height(newRoot.rightChild)) + 1;
        root = newRoot;
        return root;
    }
    private AVLNode rightrotate(AVLNode root){
        AVLNode newRoot = root.leftChild;
        root.leftChild = newRoot.rightChild;
        newRoot.rightChild = root;
        root.height = Math.max(height(root.leftChild),height(root.rightChild))+1;
        newRoot.height = Math.max(height(newRoot.leftChild), height(newRoot.rightChild)) + 1;
        root = newRoot;
        return root;
    }
    private int height(AVLNode root){
        if(root == null){
            return -1;
        }
        return root.height;
    }
    public void preorder(){
        preorder(root);
    }
    private void preorder(AVLNode root){
        if(root == null){
            return;
        }
        // System.out.println(root.value+" "+" height of "+root.value+" is "+root.height+" ");
        // System.out.println(" ");
        // System.out.println(" balance factor of "+root.value+" is "+root.balanceFactor);
        System.out.print(root.value+" ");
        preorder(root.leftChild);
        preorder(root.rightChild);
    }
}
